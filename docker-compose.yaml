services:
  backend:
    build:
      context: ..
      dockerfile: Dockerfile
    depends_on:
      - database
    container_name: "server"
    ports:
      - "8008:8008"
    networks:
      project_network:
    restart: unless-stopped
    volumes:
      - ./migrations:./app/migrations/
      - ./docs/swagger.json:./app/docs/swagger.json
      - ./config.yaml:./app/config.yaml
    environment:
      - DB_URI=postgresql://${PG_USER}:${PG_PASSWORD}@database:5432/${PG_DB}?sslmode=disable
      - REDIS_URI=redis://:${REDIS_PASSWORD}@redis:6379/0
      - AMQP_URI=amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@rabbitmq:5672/

  database:
    image: postgres:17.4-alpine
    container_name: "database"
    ports:
      - "${PG_PORT:-9432}:5432"
    environment:
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-pass}
      - POSTGRES_DB=${PG_DB:-postgres}
    networks:
      project_network:
    volumes:
      - project_volume:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U ${PG_USER:-postgres}
      interval: 30s
      timeout: 3s
      retries: 2
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:4.1-management-alpine
    container_name: "rabbitmq"
    ports:
      - "${RABBITMQ_DEFAULT_PORT:-5672}:5672"  # RabbitMQ protocol
      - "15672:15672" # RabbitMQ management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-guest}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS:-guest}
      - RABBITMQ_DEFAULT_PORT=${RABBITMQ_DEFAULT_PORT:-5672}
    networks:
      project_network:
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: "prometheus"
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
    networks:
      - project_network

  redis:
    image: redis:7.2-alpine
    container_name: redis
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--appendonly", "yes"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - project_volume:/data
    restart: unless-stopped
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


networks:
  project_network:
    external: true

volumes:
  project_volume:
